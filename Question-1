1. Question: Do the Django signals execute synchronously or asynchronously by default?
Django signals are synchronous by default. It means the signal receiver functions are triggered one after another and the current request or the current process would wait till all the receivers are done to move further.
While this synchronous behavior is sufficient for most use cases, 
it will lead to performance issues in certain scenarios, such as when you have many signal receivers or any of your receivers carry out some type of long-running activity. 
Whether you need to boost performance or want to avoid blocking the main thread, you can also look into asynchronous techniques like Celery or threading, which run signal receivers asynchronously.

Code Snippet:

import time
import datetime
from django.dispatch import Signal

my_signal = Signal()

def signal_handler(sender, **kwargs):
    print(f"Signal handler started at: {datetime.datetime.now()}")
    time.sleep(2) 
    print(f"Signal handler executed at: {datetime.datetime.now()}")

my_signal.connect(signal_handler)

def send_signal():
    print(f"Sending signal at: {datetime.datetime.now()}")
    my_signal.send(sender="sender")
    print(f"Signal sent at: {datetime.datetime.now()}")

send_signal()
