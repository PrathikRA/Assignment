Question 3: Do Django signals run in the same database transaction as the caller?
Django signals do not run within the database transaction by default, unless being explicitly wrapped in a transaction block or connected via a post-commit hook. 
Signals have no transactional nature embedded into them.

Code Snippet:
from django.db import transaction
from django.dispatch import receiver, Signal
from myapp.models import SomeModel

my_signal = Signal()

@receiver(my_signal)
def signal_receiver(sender, **kwargs):
    print("Signal received")
    print(f"SomeModel count: {SomeModel.objects.count()}")

def emit_signal():
    with transaction.atomic():
        SomeModel.objects.create(name='test')
        print("Signal emitted")
        my_signal.send(sender=None)
        print("End of transaction")

emit_signal()

If you want the signal to run after a transaction is committed then you must use the method transaction.on_commit().
def emit_signal():
    with transaction.atomic():
        SomeModel.objects.create(name='test')
        print("Signal emitted")
        transaction.on_commit(lambda: my_signal.send(sender=None))
        print("End of transaction")
